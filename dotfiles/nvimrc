scriptencoding utf-8 " Use Unicode characters in .nvimrc

set nocompatible " turn off vi mode

" Begin Plug magic
call plug#begin('~/.nvim/plugged')

Plug 'bling/vim-airline' " Statusbar/tabline. Powerline replacement
Plug 'mileszs/ack.vim' " Grep-like searcher, using Ack/Ag
Plug 'scrooloose/nerdtree' " File treeview browser
Plug 'scrooloose/nerdcommenter' " Comment'o'matic
Plug 'chriskempson/base16-vim' " Base16 color scheme support
Plug 'tpope/vim-fugitive' " Git stuff
Plug 'junegunn/vim-easy-align' " Alignment plugin with nice list of bundled rules (e.g. can handle Ruby 1.9+ hash OOB)
Plug 'scrooloose/syntastic' " Linter
Plug 'vim-ruby/vim-ruby' " Edge version of Vim's Ruby syntax support
Plug 'simnalamburt/vim-mundo' " Treeview of file changes. Fork of Gundo

call plug#end()
" End Plug magic"

" Basic
set number " Show absolute line numbers
set relativenumber " ... and show relative as well. So called 'hybrid mode'
set ruler " Show line and column number
syntax enable " Turn on syntax highlighting allowing local overrides
set encoding=utf-8 " Set default encoding to UTF-8
set laststatus=2 " Always display the statusline in all windows
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)

" Whitespace
set nowrap  " don't wrap lines
set tabstop=2 " a tab is two spaces
set shiftwidth=2 " an autoindent (with <<) is two spaces
set expandtab " use spaces, not tabs
set list " Show invisible characters
set backspace=indent,eol,start " backspace through everything in insert mode

" No EOL
set binary
au BufNewFile * set noeol

" List chars
set listchars=" " " Reset the listchars
set listchars=tab:₋⁻ " a tab should display as "₋⁻"
set listchars+=trail:⋅ " show trailing spaces as "⋅"
set listchars+=extends:→ " The character to show in the last column when wrap is off and the line continues beyond the right of the screen
set listchars+=precedes:← " The character to show in the first column when wrap is off and the line continues beyond the left of the screen

" Searching
set hlsearch " highlight matches
set incsearch " incremental searching
set ignorecase " searches are case insensitive...
set smartcase " ... unless they contain at least one capital letter

" Backups
set backupdir^=~/.nvim/_backup// " where to put backup files.
set directory^=~/.nvim/_temp//  " where to put swap files.

" Misc
set showmatch  " Show matching brackets.
set matchtime=5 " Bracket blinking.
set novisualbell " No blinking
set noerrorbells  " No noise.
set vb t_vb= " disable any beeps or flashes on error
set mouse-=a  " Disable mouse
set mousehide " Hide mouse after chars typed
set splitbelow " Horizontal split - current pane stays on top
set splitright " Vertical split - current pane is on left side

" Colors
let $NVIM_TUI_ENABLE_TRUE_COLOR=1 " Enable 24-bit colors
set background=dark " Make vim dark-terminal friendlier
colorscheme base16-twilight " Specific color scheme from Base16 collection

" Speedups
let mapleader = "\<Space>"
nnoremap <Leader>w :w<CR>
nmap <Leader><Leader> V
map q: :q
imap jk <Esc>
nnoremap <CR> G
nnoremap <BS> gg

" Airline
let g:airline_powerline_fonts = 1 " Enable fancy fonts

" NERDTree
map <F2> :NERDTreeToggle<CR>
" Clear search highlight
map <Space>n :noh<CR>

" Mundo/Gundo
nnoremap <F5> :GundoToggle<CR>

" Toggle paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

" Tabs
nnoremap <silent> <LocalLeader>[ :tabprev<CR>
nnoremap <silent> <LocalLeader>] :tabnext<CR>

" Last file position jump, except Git commit files
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
au BufRead,BufNewFile {COMMIT_EDITMSG} set ft=gitcommit

" PL/SQL file syntax highlights
au BufRead,BufNewFile *.pkb, *.pkh, *.pks, *.plb setfiletype plsql

" -----

 "BEGIN VUNDLE MAGIC

"Plugin 'wincent/Command-T'  Fuzzy file finder
"Plugin 'sjl/gundo.vim'  Treeview of file changes
"Plugin 'drn/zoomwin-vim'  Zoom splits on <C-o>
"Plugin 'tpope/vim-rails'  Rails syntax support & spec generators
"Plugin 'tpope/vim-endwise'  Somewhat better block construct/delimeter auto-placement
"Plugin 'matchit.zip'  Extended <%> matching
"Plugin 'Colorizer--Brabandt'  Display colors, as for example is CSS #F00B44 declarations
"Plugin 'ervandew/supertab'  Better <TAB> completion/IntelliSense
"Plugin 'tpope/vim-unimpaired'  Useful bracket maps
"Plugin 'majutsushi/tagbar'  Source code tag browser
"Plugin 'mattn/emmet-vim'  HTML & CSS zen coding (ultra-fast expansion)
"Plugin 'embear/vim-localvimrc'  Local custom/per-project .lvimrc files
"Plugin 'editorconfig/editorconfig-vim'  EditorConfig support (editor agnostic format configs)
"Plugin 'gregsexton/gitv'  Extra insight power in Git related tasks. Uses fugitive.
"Plugin 'terryma/vim-expand-region'  Quickly select increasingly larger regions of text
"Plugin 'kana/vim-textobj-user'  Support custom text objects. For vim-expand-region
"Plugin 'kana/vim-textobj-line'  Current line text object
"Plugin 'kana/vim-textobj-entire'  Entire buffer text object
"Plugin 'nathanaelkane/vim-indent-guides'  Display indent guides as color blocks
"Plugin 'jeffkreeftmeijer/vim-numbertoggle'  Toggle between relative and absolute line numbers automatically
"Plugin 'slim-template/vim-slim'  Slim templating engine syntax highlight

 "All of your Plugins must be added before the following line
"call vundle#end()             required
"filetype plugin indent on     required


 "END VUNDLE MAGIC


 "Include toolkit/helper functions
"source ~/.vim/functions.vim






 "Ack.vim
"let g:ackprg = 'pt --nogroup --nocolor'  Use Pt (the_platinum_searcher) with Ack.vim
"call Toolkit__add_mapping('map', '<leader>f', ':Ack<space>')
"call Toolkit__add_mapping('vnoremap', '<leader>as', ':<C-u>exec Toolkit__VAckSearch()<CR>')

 "Command-T
"let g:CommandTFileScanner = 'watchman'  Use uber-speedy Watchman, with fallback to find(1)

 "Syntastic
"let g:syntastic_ruby_checkers = ['mri', 'rubocop', 'reek']
"let g:syntastic_aggregate_errors = 1  Run all checkers and combine output
"let g:syntastic_always_populate_loc_list = 1  Auto location list population with errors
"let g:syntastic_error_symbol = "✗"
"let g:syntastic_style_error_symbol = "✗"
"let g:syntastic_warning_symbol = "⚠"
"let g:syntastic_style_warning_symbol = "⚠"
 "Syntastic speedup, to not to choke on > 1000 warnings per single file. Use :Errors
"let g:syntastic_enable_highlighting = 0
"let g:syntastic_echo_current_error = 0

 "NERDTree
"call Toolkit__add_mapping('map', '<F2>', ':NERDTreeToggle<CR>')

 "Colorizer
"let g:colorizer_auto_filetype='css,html,erb'

 "Tagbar
"call Toolkit__add_mapping('map', '<leader>rt', ':TagbarToggle<CR>')
"let g:tagbar_type_plsql = {
    "\ 'ctagstype' : 'sql',
    "\ 'kinds'     : [
        "\ 'P:packages',
        "\ 'd:prototypes',
        "\ 'c:cursors',
        "\ 'f:functions',
        "\ 'F:record fields',
        "\ 'L:block label',
        "\ 'p:procedures',
        "\ 's:subtypes',
        "\ 't:tables',
        "\ 'v:variables',
        "\ 'i:indexes',
        "\ 'V:views',
        "\ 'n:synonyms',
    "\ ]
"\ }  plsql filetype (.pls/.plb) support

 "Remove search highlight keymap

 "EasyAlign
 "Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
"vmap <Enter> <Plug>(EasyAlign)
 "Start interactive EasyAlign for a motion/text object (e.g. gaip)
"nmap ga <Plug>(EasyAlign)

 "Indent Guides
"let g:indent_guides_enable_on_vim_startup = 1  Autorun
"let g:indent_guides_auto_colors = 0  Allow custom colors for terminal Vim
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black ctermbg=234
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=white ctermbg=235

 "numbertoggle
"let g:NumberToggleTrigger=<F3>" " Switch between hybrid and absolute numbering

 "Tarpit - useful, but slow features. Left for testing in future Vim versions
"set cursorline
"set cursorcolumn
"let g:syntastic_enable_highlighting = 1
"let g:syntastic_echo_current_error = 1
